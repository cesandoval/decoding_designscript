import("ProtoGeometry.dll");
import("Math.dll");

/*
Polygon Classes
*/
// Create an RGon with a number of sides
class RGon
{
    Num_of_sides;
    Radius;
    Vertices;
    PGon;
    
    constructor FromSidesRadius(num_of_sides, radius)
    {
        Num_of_sides = num_of_sides;
        Radius = radius;
        
        step = Math.PI * 2.0 / this.Num_of_sides;
        interv = 0..this.Num_of_sides-1;
        Vertices = Point.ByCoordinates(this.Radius * Math.Cos(Math.RadiansToDegrees(step * interv)), this.Radius * Math.Sin(Math.RadiansToDegrees(step * interv)), 0);
        PGon = BSplineCurve.ByControlVertices(this.Vertices,1,true);
    }
}

/*
Vector Functions
*/

// returns the angle between 2 vectors
def angle(vec1, vec2)
{
    vdot = vec1.Dot(vec2) / (vec1.Length * vec2.Length);
    [Imperative]
    {
        if (vdot > 1.0)
            vdot = 1.0;
        if (vdot < -1.0)
            vdot = -1.0;
    }
    return = Math.Acos(vdot);
}

// Returns a new vector limited to a given length.
def limited(vector, n)
{
    new_vec = vector.Length < n ? vector : vector.Normalize().Scale(n);
    return = new_vec;
}

// creates a vector from two given points
def vec_two_points(spt, ept)
{
    return =  Vector.ByCoordinates(ept.X - spt.X, ept.Y - spt.Y, ept.Z - spt.Z);
}

// Creates a random vector
def vec_random(rand_min,rand_max,constrain_2d)
{
    x = Math.Rand(rand_min, rand_max);
    y = Math.Rand(rand_min, rand_max);
    z = Math.Rand(rand_min, rand_max);
    return = constrain_2d == true ? Vector.ByCoordinates(x, y, 0) : Vector.ByCoordinates(x, y, z);
}
    
//Returns the normalized bisector of two vectors.
def bisector(v0,v1)
{
    v0 = v0.Normalize();
    v1 = v1.Normalize();
    x = Sum({ v0.X, v1.X }) / 2;
    y = Sum({ v0.Y, v1.Y }) / 2;
    z = Sum({ v0.Z, v1.Z }) / 2;
    return = Vector.ByCoordinates(x, y, z);
}

// creates a vector from a given line
def vec_from_line(line)
{
    return = vec_two_points(line.StartPoint, line.EndPoint);
}



/*
Coordinate System Functions
*/

// Returns a coordinate system on the world xy plane. The rotation value controls the rotation of the cs.
def on_xy_rotate(rot)
{
    x_vec = Vector.ByCoordinates(Math.Cos(Math.RadiansToDegrees(rot)), Math.Sin(Math.RadiansToDegrees(rot)), 0);
    return = CoordinateSystem.ByOriginVectors(Point.ByCoordinates(0, 0, 0), x_vec, x_vec.Cross(Vector.ByCoordinates(0, 0, -1)));
}



/*
Circle Functions
*/
def circle_mutually_tangent(cir_a,cir_b,tangent_offset, calc_extras)
{
    z_axis = cir_a.Normal;

    vec_rad = vec_two_points(cir_a.CenterPoint, cir_b.CenterPoint).Normalize().Scale(cir_a.Radius);
    pt_tan = Point.ByCoordinates(cir_a.CenterPoint.X + vec_rad.X, cir_a.CenterPoint.Y + vec_rad.Y, cir_a.CenterPoint.Z + vec_rad.Z);
    cs;
    [Imperative]
    {
        if (tangent_offset!= 0.0)
        {
            cs = CoordinateSystem.ByOriginVectors(cir_a.CenterPoint, vec_rad, vec_rad.Cross(z_axis));
            pt_tan = Point.ByCartesianCoordinates(cs, cir_a.Radius * Math.Cos(Math.RadiansToDegrees(tangent_offset)), cir_a.Radius * Math.Sin(Math.RadiansToDegrees(tangent_offset)), 0);
        }
    }
    
    vec_b = vec_two_points(pt_tan, cir_a.CenterPoint).Normalize().Scale(cir_b.Radius);
    pt_ff = Point.ByCoordinates(pt_tan.X + vec_b.X, pt_tan.Y + vec_b.Y, pt_tan.Z + vec_b.Z);
    vec_c = vec_two_points(pt_ff, pt_tan);
    pt_fa = Point.ByCoordinates(pt_ff.X + vec_c.Scale(-1000).X, pt_ff.Y + vec_c.Scale(-1000).Y, pt_ff.Z + vec_c.Scale(-1000).Z);
    pt_fb = Point.ByCoordinates(pt_ff.X + vec_c.Scale(1000).X, pt_ff.Y + vec_c.Scale(1000).Y, pt_ff.Z + vec_c.Scale(1000).Z);
    ln_f = Line.ByStartPointEndPoint(pt_fa, pt_fb);

    pt_gg = Point.AtParameter(Line.ByStartPointEndPoint(pt_ff, cir_b.CenterPoint), 0.5);
    vec_d = vec_two_points(pt_ff, cir_b.CenterPoint).Cross(z_axis);
    pt_ga = Point.ByCoordinates(pt_gg.X + vec_d.Scale(-1000).X, pt_gg.Y + vec_d.Scale(-1000).Y, pt_gg.Z + vec_d.Scale(-1000).Z);
    pt_gb = Point.ByCoordinates(pt_gg.X + vec_d.Scale(1000).X, pt_gg.Y + vec_d.Scale(1000).Y, pt_gg.Z + vec_d.Scale(1000).Z);
    ln_g = Line.ByStartPointEndPoint(pt_ga, pt_gb);    
    inters = ln_g.Intersect(ln_f);
    rad = inters.DistanceTo(pt_tan);
    cir = Circle.ByCenterPointRadius(inters, rad, z_axis);

    return = [Imperative]
    {
        if (calc_extras == true)
        {
            extra_vec = vec_two_points(cir.CenterPoint, cir_b.CenterPoint).Normalize().Scale(cir.Radius);
            pt_tan_b = Point.ByCoordinates(cir.CenterPoint.X+extra_vec.X, cir.CenterPoint.Y+extra_vec.Y, cir.CenterPoint.Z+extra_vec.Z);
            return = { cir, pt_tan, pt_tan_b };
        }
        else
        {
            return = cir;
        }
    }
}



/*
Arc Functions
*/

def from_tan(spt, ept, tan)
{
    vec_ab = Vector.ByCoordinates(ept.X - spt.X, ept.Y - spt.Y, ept.Z - spt.Z);
    vec_rad = tan.Cross(tan.Cross(vec_ab));
    ang = angle(vec_ab, vec_rad);
    rad = vec_ab.Length / Math.Cos(ang) / 2.0;
    center = spt.Translate(vec_rad, -rad);// this should be positive
    return = Arc.ByCenterPointStartPointSweepPoint(center, spt, ept);
}

//Returns a best fit arc using the modified least squares method.
def leastSquaresArc(pts_in : Point[])
{
    cnt = Count(pts_in);
    // if there is less than two points given
    message = cnt < 2 ? "Please provide more points" : null;

    x = Sum(pts_in.X);
    y = Sum(pts_in.Y);
    xsq = Sum(Math.Pow(pts_in.X, 2));
    ysq = Sum(Math.Pow(pts_in.Y, 2));
    xy = Sum(pts_in.X * pts_in.Y);
    xysq = Sum(pts_in.X * Math.Pow(pts_in.Y, 2));
    xsqy = Sum(Math.Pow(pts_in.X, 2) * pts_in.Y);
    xcube = Sum(Math.Pow(pts_in.X, 3));
    ycube = Sum(Math.Pow(pts_in.Y, 3));

    A = cnt * xsq - Math.Pow(x, 2);
    B = cnt * xy - x * y;
    C = cnt * ysq - Math.Pow(y, 2);
    D = 0.5 * (cnt * xysq - x * ysq + cnt * xcube - x * xsq);
    E = 0.5 * (cnt * xsqy - y * xsq + cnt * ycube - y * ysq);
    
    // set the denominator
    denom = A * C - B * B;
    // if the denominator is not 0:
    center = denom!= 0 ? Point.ByCoordinates((D * C - B * E) / denom, (A * E - B * D) / denom, 0) : null;
    // set the radius of the arc as the average dist between the center and the pts.
    rad = Sum(pts_in.DistanceTo(center)) / cnt;
    //create a segment from the center to that point
    segs = Line.ByStartPointEndPoint(center, pts_in); 
    
    // make the first Vec a reference for the rest
    ref_vec = vec_from_line(segs[0]);
    // for each segment in the list of segments:
    ang = { };
    [Imperative]
    {
        for(seg in segs)
        {
            if (ref_vec.Cross(vec_from_line(seg)).Z < 0)
            {
                ang[Count(ang)] = angle(ref_vec, vec_from_line(seg)) * - 1;
            }
            else
            {
                ang[Count(ang)] = angle(ref_vec, vec_from_line(seg));
            }
        }
    }
    // sort all segments by the calculated angles
    new_segs = segs[SortIndexByValue(ang)];
    new_ang = ang[SortIndexByValue(ang)];
    sweep = new_ang[-1] - new_ang[0];
    cs = CoordinateSystem.ByOriginVectors(center, vec_from_line(segs[0]), vec_from_line(segs[1]));
    Print({ rad, sweep });
    return = Arc.ByCenterPointRadiusAngle(cs.Origin, rad, angle( CoordinateSystem.Identity().XAxis, cs.XAxis), sweep, cs.ZAxis);
}



/*
PGon functions
*/

// Rotates the vertices in this object.
def rotate(pgon,n)
{
    n = n > Count(pgon.Vertices)-1 ? n%Count(pgon.Vertices) : n;
    n = n < -Count(pgon.Vertices) - 1 ? -Math.Abs(n)%Count(pgon.Vertices) : n;
    verts = SetUnion(pgon.Vertices[n..Count(pgon.Vertices) - 1], pgon.Vertices[0..n]);
    return = Polygon.ByVertices(verts);
}

// Creates a 2d BBox around a Polygon
def bbox(p_gon)
{
    x = { p_gon.Vertices.X[SortIndexByValue(p_gon.Vertices.X)[0]], p_gon.Vertices.X[SortIndexByValue(p_gon.Vertices.X)[-1]] };
    y = { p_gon.Vertices.Y[SortIndexByValue(p_gon.Vertices.Y)[0]], p_gon.Vertices.Y[SortIndexByValue(p_gon.Vertices.Y)[-1]] };
    pts = Flatten(Point.ByCoordinates(x<2>, y<1>, 0));
    return = Polygon.ByVertices({ pts[0], pts[1], pts[3], pts[2] });
}

// Returns the Area of a Rectangle
def rec_area(rec)
{
    lengths = rec.Edges.Length[SortIndexByValue(rec.Edges.Length)];
    return = lengths[0] * lengths[-1];
}

/*
Point Functions
*/

// Returns a new point that results from adding this point's world coordinates to the other point's (or vector's) world coordinates.
def point_addition(p1, p2)
{
    return = Point.ByCoordinates(p1.X + p2.X, p1.Y + p2.Y, p1.Z + p2.Z);
}

// Returns a new point that results from dividing each of this point's world coordinates by the value provided.
def point_division(pt, factor)
{
    return = Point.ByCoordinates(pt.X / factor, pt.Y / factor, pt.Z / factor);
}



/*
Curve Functions
*/

// Decomposes a curve into subcurves
def decompose_curve(curve, divs)
{
    return = Line.ByStartPointEndPoint(Point.AtParameter(curve, 0..1-1/divs..1/divs), Point.AtParameter(curve, 1/divs..1..1/divs));
}

// Create a BSPlineCurve from a list of lines
def lines_to_crv(curves : Curve[])
{
    _pts = curves.StartPoint;
    _pts[(Count(_pts))] = curves[Count(curves) - 1].EndPoint;
    return = BSplineCurve.ByPoints(_pts);
}

def pts_to_lines(_pts : Point[])
{
    return = Line.ByStartPointEndPoint(_pts[0..Count(_pts) - 2], _pts[1..Count(_pts) - 1]);
}