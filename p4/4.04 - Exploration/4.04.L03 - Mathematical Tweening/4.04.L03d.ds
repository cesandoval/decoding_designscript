/*//
4.04.L03d
Given a list of numbers, 2 curve functions and a floor height, generate a number of tweened Curves to define a series of tower floor plates.

required: 
func1 (func) Method to create a diamond Curve.
func2 (func) Method to create an astroid Curve.
floorheight (float) Distance between floor plates. 
skew ([float]) List of values to interpolate the Curves.

result:
floor_plates ([Curve])
//*/

/*
Methods to create ellipse and astroid curves. 
*/
import("ProtoGeometry.dll");
import("Math.dll");

def ellipse(t)
{
    c = Math.Cos((2 * Math.PI * t)*57.2957795);
    s = Math.Sin((2 * Math.PI * t)*57.2957795);
    pt_out = Point.ByCoordinates(len_x * c, len_y * s,0);
    return = pt_out;
}
     
     
def astroid(t)
{
    c = Math.Cos((2 * Math.PI * t)*57.2957795);
    s = Math.Sin((2 * Math.PI * t)*57.2957795);
    pt_out = Point.ByCoordinates(len_x * c * c * c, len_y * s * s * s,0);
    return = pt_out;
}

def func(n,t,skew)
{
    t1 = (1 - skew);
    x = ellipse(t).X * t1 + astroid(t).X * skew;
    y = ellipse(t).Y * t1 + astroid(t).Y * skew;
    base_cs = CoordinateSystem.ByOriginVectors(Point.ByCoordinates(0, 0, n*f_height), Vector.ByCoordinates(1, 0, 0), Vector.ByCoordinates(0, 1, 0));
    return = Point.ByCartesianCoordinates(base_cs, x, y, 0); 
}

/*
Method to modify a value with mathematical functions.
*/
def f(x)
{
    return = [Imperative]
    {
        s = MapTo(0, 1, skew, 0.00001, 4);
        x = x - 0.5;
        y = 0.0;
        if (x < 0)
        {
            y = -Math.Pow(Math.Sqrt(-x),s);
        }
        if (x > 0)
        {
            y = Math.Pow(Math.Sqrt(x),s);
        }
        return = y;
    }
}

/*
Generate a series of numbers, and modify them with a method based on mathematical functions.
*/
skew = 0.6;
count = 18;
interval = 0..1..#count;
skew_val = MapTo(f(0), f(1), f(interval), 0, 1);

/*
Given a list of values, interpolate between 2 curves based on each one of the values of the list. 
*/
len_x = 10.0;
len_y = 6.0;
num_floors = 15;
f_height = 3.0;
// create an array of floor indeces
floor_range = 0..num_floors;

tol = 0.01;
crv_domain = 0..1..tol;
// create a interpolated Curve on every floor height
curves = BSplineCurve.ByPoints(func(floor_range<1>, crv_domain<2>, skew_val<1>));