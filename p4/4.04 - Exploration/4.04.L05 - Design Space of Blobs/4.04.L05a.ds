/*
4.04.L05a
Create a solution space matrix of blobby curves.  

required: 
rad (float) Radius of blob.
alpha ([float]) Decimal value to create the blob.

 
result: 
crv_out (Curve) A close curve with different shape and size. A portion of the curves will be self-intersecting.   
*/  
/*
Method to create a blobby curve based on a radius and an alpha value in mathematical space.
*/ 

import("ProtoGeometry.dll");
import("Math.dll");
     
def blob(t,alpha)
{
    // define a number of values with mathematical functions
    c = Math.Cos((2 * Math.PI * t)*57.2957795);
    s = Math.Sin((2 * Math.PI * t)*57.2957795);
    c_theta = Math.Cos((2 * Math.PI * alpha)*57.2957795);
    s_theta = Math.Sin((2 * Math.PI * alpha)*57.2957795);
    factor = 1.0 / Math.Sqrt(2);
    r = 50 * (1 + rad * factor * c_theta * Math.Cos((4 * Math.PI * t)*57.2957795) + rad * factor * s_theta * Math.Cos((6 * Math.PI * t)*57.2957795));
    // create a Point based on the mathematical values
    pt_out = Point.ByCoordinates(r * c, r * s, 0);
    return = pt_out;
}

/*
Generate a number of blobs with Associative replication
*/
// set some initial values
num = 11;
rad = 1.0;
alpha = 0..1..#num;
dist = 2000;

// set curve domain
tol = 0.01;
crv_domain = 0..1..tol;
// create Points for the blobs
pts = blob(crv_domain<2>, alpha<1>);
// create curves with the Points and translate them
curves = BSplineCurve.ByPoints(pts).Translate(0, (0..1..#num)*dist, 0);