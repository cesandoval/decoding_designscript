<Workspace Version="0.6.3.19437" X="151.079322280444" Y="272.00974574913" zoom="0.610530828301024" Description="" Category="" Name="Home">
  <Elements>
    <Dynamo.Nodes.CodeBlockNodeModel type="Dynamo.Nodes.CodeBlockNodeModel" guid="cbe4dae1-879f-43bb-a1c6-0cb6a0235a55" nickname="Code Block" x="-3.33793461789048" y="-425.578118454809" isVisible="true" isUpstreamVisible="true" lacing="Disabled" CodeText="// TODO: figure out how to make a function by passing lists&#xA;// figure out how to scale geometry&#xA;&#xA;def mesh_pgons(verts)// pts_top, pts_mid, pts_btm)&#xA;{&#xA;    [Imperative]&#xA;    {&#xA;        Print(verts);&#xA;    }&#xA;}&#xA;&#xA;// define the Points&#xA;p1 = Point.ByCoordinates(1.0, 0.0, 10.0);&#xA;p2 = Point.ByCoordinates(0.789695, 0.866025, 10.0);&#xA;p3 = Point.ByCoordinates(-0.5, 0.866025, 10.0);&#xA;p4 = Point.ByCoordinates(-1.360366, 0.0, 10.0);&#xA;p5 = Point.ByCoordinates(-0.860366, -0.866025, 10.0);&#xA;p6 = Point.ByCoordinates(0.5, -0.473478, 10.0);&#xA;pgon_top = Polygon.ByVertices({ p1, p2, p3, p4, p5, p6 });&#xA;&#xA;//Get the centroid and vertices of the top PGon &#xA;cen = pgon_top.Plane.Origin;&#xA;pts_top = pgon_top.Vertices;&#xA;rot_mid = 90;&#xA;sc = 3;&#xA;    &#xA;// Get the vertices for the mid PGon from a displaced top Pgon. &#xA;pts_mid = Point.AtParameter(pgon_top.Edges, 0.5).Translate(0, 0, -cen.Z * 0.5);&#xA;mid_cen = cen.Translate(0,0,-cen.Z*0.5);&#xA;new_cs = CoordinateSystem.Identity().Rotate(rot_mid, Vector.ByCoordinates(0, 0, 1),mid_cen);&#xA;pts_mid = pts_mid.Transform(CoordinateSystem.Identity(), new_cs);&#xA;pts_btm = Point.AtParameter(pgon_top.Edges, 0.5).Translate(0, 0, -cen.Z);&#xA;&#xA;verts = Flatten({ pts_top, pts_mid, pts_btm });&#xA;cnt = Count(pts_top);&#xA;faces = { };&#xA;[Imperative]&#xA;{&#xA;    for(n in 0..cnt - 2)&#xA;    {&#xA;        faces[Count(faces)] = { n, n + 1, n + cnt };&#xA;        faces[Count(faces)] = { n + 1, cnt + n + 1, cnt + n };&#xA;        faces[Count(faces)] = { cnt + n, 2 * cnt + n + 1, cnt * 2 + n };&#xA;        faces[Count(faces)] = { cnt + n, cnt + n + 1, 2 * cnt + n + 1 };&#xA;    }&#xA;    faces[Count(faces)] = { cnt - 1, 0, cnt * 2 - 1 };&#xA;    faces[Count(faces)] = { 0, cnt, cnt * 2 - 1 };&#xA;    faces[Count(faces)] = { cnt * 3 - 1, cnt * 2 - 1, cnt * 2 };&#xA;    faces[Count(faces)] = { cnt * 2, cnt * 2 - 1, cnt };&#xA;}&#xA;msh = Mesh.ByVerticesFaceIndices(verts, faces);" ShouldFocus="false" />
  </Elements>
  <Connectors />
  <Notes />
</Workspace>