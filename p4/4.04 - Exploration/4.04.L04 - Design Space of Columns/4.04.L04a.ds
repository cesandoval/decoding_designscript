import("ProtoGeometry.dll");
import("Math.dll");
// TODO: figure out how to make a function by passing lists
// figure out how to scale geometry

def mesh_pgons(verts)// pts_top, pts_mid, pts_btm)
{
    [Imperative]
    {
        Print(verts);
    }
}

// define the Points
p1 = Point.ByCoordinates(1.0, 0.0, 10.0);
p2 = Point.ByCoordinates(0.789695, 0.866025, 10.0);
p3 = Point.ByCoordinates(-0.5, 0.866025, 10.0);
p4 = Point.ByCoordinates(-1.360366, 0.0, 10.0);
p5 = Point.ByCoordinates(-0.860366, -0.866025, 10.0);
p6 = Point.ByCoordinates(0.5, -0.473478, 10.0);
pgon_top = Polygon.ByVertices({ p1, p2, p3, p4, p5, p6 });

//Get the centroid and vertices of the top PGon 
cen = pgon_top.Plane.Origin;
pts_top = pgon_top.Vertices;
rot_mid = 90;
sc = 3;
    
// Get the vertices for the mid PGon from a displaced top Pgon. 
pts_mid = Point.AtParameter(pgon_top.Edges, 0.5).Translate(0, 0, -cen.Z * 0.5);
mid_cen = cen.Translate(0,0,-cen.Z*0.5);
new_cs = CoordinateSystem.Identity().Rotate(rot_mid, Vector.ByCoordinates(0, 0, 1),mid_cen);
pts_mid = pts_mid.Transform(CoordinateSystem.Identity(), new_cs);
pts_btm = Point.AtParameter(pgon_top.Edges, 0.5).Translate(0, 0, -cen.Z);

verts = Flatten({ pts_top, pts_mid, pts_btm });
cnt = Count(pts_top);
faces = { };
[Imperative]
{
    for(n in 0..cnt - 2)
    {
        faces[Count(faces)] = { n, n + 1, n + cnt };
        faces[Count(faces)] = { n + 1, cnt + n + 1, cnt + n };
        faces[Count(faces)] = { cnt + n, 2 * cnt + n + 1, cnt * 2 + n };
        faces[Count(faces)] = { cnt + n, cnt + n + 1, 2 * cnt + n + 1 };
    }
    faces[Count(faces)] = { cnt - 1, 0, cnt * 2 - 1 };
    faces[Count(faces)] = { 0, cnt, cnt * 2 - 1 };
    faces[Count(faces)] = { cnt * 3 - 1, cnt * 2 - 1, cnt * 2 };
    faces[Count(faces)] = { cnt * 2, cnt * 2 - 1, cnt };
}
msh = Mesh.ByVerticesFaceIndices(verts, faces);