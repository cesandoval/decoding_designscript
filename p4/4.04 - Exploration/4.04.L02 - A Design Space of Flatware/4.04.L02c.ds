import("ProtoGeometry.dll");
import("Math.dll");
import("../../../library/decodes_functions.ds");

/*
A class that creates a Prong object
*/
class Prong
{
    Chin : Point;
    Cheek : Point;
    Head : Point;
    Is_left : bool;
    Cheek_Knife : Point;
    Head_Knife : Point;
    Cheek_Fork : Point;
    Head_Fork : Point;
    Cheek_Spoon : Point;
    Head_Spoon : Point;

    constructor ByChin(chin, is_left)
    {
        // store variables for initial Point locations
        Chin = chin;
        Cheek = chin.Translate(0, 3, 0);
        Head = chin.Translate(0.5, 6, 0);
        // store the prong's side
        Is_left = is_left;
    }
     
    // store the variables for final knife Point locations
    def set_knife(cheek,head)
    {
        Cheek_Knife = cheek;
        Head_Knife = head;
    }
      
    // store the variables for final fork Point locations   
    def set_fork(cheek, head)
    {
        Cheek_Fork = cheek;
        Head_Fork = head;
    }
        
    // store the variables for final spoon Point locations
    def set_spoon(cheek, head)
    {
        Cheek_Spoon = cheek;
        Head_Spoon = head;
    }
      
    //Given forkiness, spooniness and knifiness values, this function creates a hybridized Prong.
    def make_cutlery(knifiness, forkiness, spooniness)
    {
        // create a cheek movement vector from all given values
        cheek_knife_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Knife);
        cheek_knife_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_knife_seg, knifiness));
        cheek_fork_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Fork);
        cheek_fork_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_fork_seg, forkiness));
        cheek_spoon_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Spoon);
        cheek_spoon_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_spoon_seg, spooniness));
        cheek_vec = Vector.op_Addition(cheek_knife_vec, Vector.op_Addition(cheek_fork_vec, cheek_spoon_vec));
            
        // create a head movement vector from all given values
        head_knife_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Knife);
        head_knife_vec = vec_two_points(this.Head, Point.AtParameter(head_knife_seg, knifiness));
        head_fork_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Fork);
        head_fork_vec = vec_two_points(this.Head, Point.AtParameter(head_fork_seg, forkiness));
        head_spoon_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Spoon);
        head_spoon_vec = vec_two_points(this.Head, Point.AtParameter(head_spoon_seg, spooniness));
        head_vec = Vector.op_Addition(head_knife_vec, Vector.op_Addition(head_fork_vec, head_spoon_vec));
        
        // move the cheek and head Points
        Cheek = Cheek.Translate(cheek_vec.X, cheek_vec.Y, cheek_vec.Z);
        Head = Head.Translate(head_vec.X, head_vec.Y, head_vec.Z);
    }
    
    // returns a curve from the chin, cheek and head points
    def to_curve()
    {
        // create a curve from the existing points
        crvL = BSplineCurve.ByPoints({ this.Chin, this.Cheek, this.Head });
        // create a curve from from offset points
        crvR = BSplineCurve.ByPoints({ this.Chin.Translate(1, 0, 0), this.Cheek.Translate(1, 0, 0), this.Head });
        // if the prong is on the left flatware side:
        return = this.Is_left == true ? { crvL, crvR } : { crvR, crvL };
    }
}


/*
A class that creates a Web object between Prongs
*/
class Web
{
    Outer : Point;
    Inner : Point;
    Middle : Point;
    Outer_prong : Prong;
    Inner_prong : Prong;
    Is_left : bool;
    Tolerance : double;
    Pull_knife : Point;
    Pull_fork : Point;
    Pull_spoon : Point;
    
    constructor WithProngs(prongO, prongI, is_left)
    {
        // store variables for initial Point locations
        Outer = prongO.Head; // the tip of the outer prong
        Inner = prongI.Head; // the tip of the innter prong
        Middle = point_division(point_addition(prongO.Head, prongI.Head), 2.0); // midpoint
        // store the prongs
        Outer_prong = prongO;
        Inner_prong = prongI;
        Is_left = is_left; // web location on the flatware
        Tolerance = 0.001; // angle tolerance
    }
    
    // store the final knife Point location     
    def set_knife(pull)
    {
        Pull_knife = pull;
    }
    
    // store the final fork Point location
    def set_fork(pull)
    {
        Pull_fork = pull;
    }
    
    // store the final spoon Point location
    def set_spoon(pull)
    {
        Pull_spoon = pull;
    }
              
    //Given forkiness, spooniness and knifiness values, this function creates a hybridized Web.
    def make_cutlery(knifiness, forkiness, spooniness)
    {
        // create a movement vector from all given values
        pull_knife_seg = Line.ByStartPointEndPoint(this.Middle, this.Pull_knife);
        pull_knife_vec = vec_two_points(this.Middle, Point.AtParameter(pull_knife_seg, knifiness));
        pull_fork_seg = Line.ByStartPointEndPoint(this.Middle, this.Pull_fork);
        pull_fork_vec = vec_two_points(this.Middle, Point.AtParameter(pull_fork_seg, forkiness));
        pull_spoon_seg = Line.ByStartPointEndPoint(this.Middle, this.Pull_spoon);
        pull_spoon_vec = vec_two_points(this.Middle, Point.AtParameter(pull_spoon_seg, spooniness));
        pull_vec = Vector.op_Addition(pull_knife_vec, Vector.op_Addition(pull_fork_vec, pull_spoon_vec));
        
        // if the web is a valley:
        pull_vec = this.is_mountain() == false ? Vector.ByCoordinates(0, pull_vec.Y, pull_vec.Z) : pull_vec;
        // move the middle point
        Middle = Middle.Translate(pull_vec.X, pull_vec.Y, pull_vec.Z);
    }
    
    //This function calculates the Web's intersection with the prongs and returns a trimmed Web
    def get_subcrv()
    {
        w_edge = this.to_curve();
        i_edge = this.Inner_prong.to_curve();
        intersection_lst = w_edge.Intersect(i_edge);

        // if there is no intersection, return the curve
        new_crv = Count(intersection_lst) == 0 ? this.to_curve() : 0;
        // if the inner point is in the intersection:
        intersection_lst = this.Inner.DistanceTo(intersection_lst[-1]) < this.Tolerance ? Remove(intersection_lst, -1) : intersection_lst;
        // if the list is empty, return the curve
        new_crv = Count(intersection_lst) == 0 ? this.to_curve() : 0;
        // get the surrogate (Pline) of the curve
        original_crv = this.to_curve();
        // get its segment index 
        ni = Flatten(intersection_lst)[0].IndexOfNearest(Flatten(intersection_lst)[0].Project(decompose_curve(original_crv, 10)));
        //Print(decompose_curve(original_crv, 10));
        // and remove all of the segments after the index
        new_crv = decompose_curve(original_crv, 10)[0..ni];
        return = new_crv;
    }


    //This function determines the concavity of the Web
    def is_mountain()
    {
        // if the web is on the left side of the flatware:
        vec1 = this.Is_left == true ? vec_two_points(this.Middle, this.Outer) : vec_two_points(this.Middle, this.Inner);
        vec2 = this.Is_left == true ? vec_two_points(this.Middle, this.Inner) : vec_two_points(this.Middle, this.Outer);
        
        // if the web is flat:
        return = [Imperative]
        {
            if (angle(vec1, vec2) < this.Tolerance || angle(vec1, vec2) > Math.PI - this.Tolerance)
            {
                return = false;
            }
            // else:
            else
            {
                // create a CS
                cs = CoordinateSystem.Identity();// ByOriginVectors(this.Middle, vec1, vec2);
                // if the z axis of the CS is positive:
                if (cs.ZAxis.Z > 0)
                {
                    // if the middle point is below both other points:
                    if ( this.Middle.Y < this.Outer.Y && this.Middle.Y < this.Inner.Y)
                    {
                        // return False
                        return = false;
                    }
                    // else 
                    else
                    {
                        // return True
                        return = true;
                    }
                }
                // if the z axis of the CS is negative:
                if (cs.ZAxis.Z < 0)
                {
                    // return False
                    return = false;
                }
            }
        }
    }
    
    // return the curve surrogate
    def to_curve()
    {
        return = BSplineCurve.ByPoints({ this.Outer, this.Middle, this.Inner });
    }
}

// Initial values
knifiness = 0.0;
forkiness = 1.0;// 0.47;
spooniness = 1.0;

// Create Prongs and Webs for the Design space of flatware
// Initialize Prongs at chin locations
prong_lst = { Prong.ByChin(Point.ByCoordinates(-4, 0, 0), true), Prong.ByChin(Point.ByCoordinates(-2, 0, 0), true), Prong.ByChin(Point.ByCoordinates(1, 0, 0), false), Prong.ByChin(Point.ByCoordinates(3, 0, 0), false) };

// set knife, fork, and spoon values for each Prong's cheek and head
pts_a = { { Point.ByCoordinates(-5, 29, 0), Point.ByCoordinates(-3, 17, 0), Point.ByCoordinates(1, 7, 0), Point.ByCoordinates(5, 1, 0) },
    { Point.ByCoordinates(-5, 5, 0), Point.ByCoordinates(-3, 5, 0), Point.ByCoordinates(2, 5, 0), Point.ByCoordinates(4, 5, 0) },
    { Point.ByCoordinates(-12, 10, 0), Point.ByCoordinates(-5, 3, 0), Point.ByCoordinates(4, 3, 0), Point.ByCoordinates(11, 10, 0) } };
pts_b = { { Point.ByCoordinates(-4, 62, 0), Point.ByCoordinates(-2, 33, 0), Point.ByCoordinates(2, 14, 0), Point.ByCoordinates(6, 3, 0) },
    { Point.ByCoordinates(-4, 30, 0), Point.ByCoordinates(-2, 30, 0), Point.ByCoordinates(2, 30, 0), Point.ByCoordinates(4, 30, 0) },
    { Point.ByCoordinates(-4, 20, 0), Point.ByCoordinates(-3, 6, 0), Point.ByCoordinates(3, 6, 0), Point.ByCoordinates(4, 20, 0) } };

prong_lst.set_knife(pts_a[0], pts_b[0]);
prong_lst.set_fork(pts_a[1], pts_b[1]);
prong_lst.set_spoon(pts_a[2], pts_b[2]);

// modify each Prong according to knifiness,forkiness, and spooniness
prong_lst.make_cutlery(knifiness, forkiness, spooniness);

// initialize Webs from their connecting Prongs
web_lst = Web.WithProngs(prong_lst[{ 0, 1, 3 }], prong_lst[{ 1, 2, 2 }], { true, true, false });

// set knife, fork, and spoon values for each Web's middle Point.
pts_c = { Point.ByCoordinates(-3, -18, 0), Point.ByCoordinates(0, -18, 0), Point.ByCoordinates(3, -18, 0) };
web_lst.set_knife(Point.ByCoordinates(6, 62, 0));
web_lst.set_fork(pts_c);
web_lst.set_spoon(Point.ByCoordinates(0, 24, 0));

// modify each Web according to knifiness,forkiness, and spooniness
web_lst.make_cutlery(knifiness, forkiness, spooniness);


// Modify the webs according to their concavity. This allows for webs to combine in case of knifiness or spooniness.
// if the center Web is convex:
[Imperative]
{
    if (web_lst[1].is_mountain())
    {
        // if the left Web is convex:
        if (web_lst[0].is_mountain())
        {
                // if the right Web is convex:
            if (web_lst[2].is_mountain())
            {
                // replace all three with a single Web
                new_pull = Polygon.ByVertices(web_lst.Middle).Plane.Origin;
                web_lst = { Web.WithProngs(prong_lst[0], prong_lst[3], true) };
                web_lst.Middle = new_pull;
            }
                // else:
            else
            {
                // replace the two convex Webs with a single Web
                new_pull = Polygon.ByVertices({ web_lst[0].Middle, web_lst[1].Middle }).Plane.Origin;
                new_pull2 = web_lst[2].Middle;
                web_lst = { Web.WithProngs(prong_lst[0], prong_lst[2], true) };
                web_lst.Middle = new_pull;
                // and keep the concave Web
                web_lst[Count(web_lst)] = Web.WithProngs(prong_lst[2], prong_lst[3], false);
                web_lst[1].Middle = new_pull2;
            }
        }
            // else if the right Web is convex:
        else if (web_lst[2].is_mountain())
        {   
            // replace the two convex Webs with a single Web
            new_pull = Polygon.ByVertices({ web_lst[1].Middle, web_lst[2].Middle }).Plane.Origin;
            new_pull2 = web_lst[0].Middle;
            web_lst = { Web.WithProngs(prong_lst[0], prong_lst[1], true) };
            web_lst.Middle = new_pull2;
            // and keep the concave Web
            web_lst[Count(web_lst)] = Web.WithProngs(prong_lst[1], prong_lst[3], false);
            web_lst.Middle = new_pull;
        }
    }
}
// cut out intersecting webs
web_lst.get_subcrv();
prong_lst.to_curve();