import("ProtoGeometry.dll");
import("Math.dll");

// creates a vector from two given points
def vec_two_points(spt, ept)
{
    return =  Vector.ByCoordinates(ept.X - spt.X, ept.Y - spt.Y, ept.Z - spt.Z);
}

/*
A class that creates a Prong object
*/

class Prong
{
    Chin : Point;
    Cheek : Point;
    Head : Point;
    Is_left : bool;
    Cheek_Knife : Point;
    Head_Knife : Point;
    Cheek_Fork : Point;
    Head_Fork : Point;
    Cheek_Spoon : Point;
    Head_Spoon : Point;

    constructor ByChin(chin, is_left)
    {
        // store variables for initial Point locations
        Chin = chin;
        Cheek = chin.Translate(0, 3, 0);
        Head = chin.Translate(0.5, 6, 0);
        // store the prong's side
        Is_left = is_left;
    }
     
    // store the variables for final knife Point locations
    def set_knife(cheek,head)
    {
        Cheek_Knife = cheek;
        Head_Knife = head;
    }
      
    // store the variables for final fork Point locations   
    def set_fork(cheek, head)
    {
        Cheek_Fork = cheek;
        Head_Fork = head;
    }
        
    // store the variables for final spoon Point locations
    def set_spoon(cheek, head)
    {
        Cheek_Spoon = cheek;
        Head_Spoon = head;
    }
    
    
    /*   
    Given forkiness, spooniness and knifiness values, this function creates a hybridized Prong.
    */
    def make_cutlery(knifiness, forkiness, spooniness)
    {
        Print(this.Head);
        /* // create a cheek movement vector from all given values
        cheek_knife_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Knife);
        cheek_knife_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_knife_seg, knifiness));
        cheek_fork_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Fork);
        cheek_fork_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_fork_seg, forkiness));
        cheek_spoon_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Spoon);
        cheek_spoon_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_spoon_seg, spooniness));
        cheek_vec = Vector.op_Addition(cheek_knife_vec, Vector.op_Addition(cheek_fork_vec, cheek_spoon_vec));
            
        // create a head movement vector from all given values
        head_knife_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Knife);
        head_knife_vec = vec_two_points(this.Head, Point.AtParameter(head_knife_seg, knifiness));
        head_fork_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Fork);
        head_fork_vec = vec_two_points(this.head, Point.AtParameter(head_fork_seg, forkiness));
        head_spoon_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Spoon);
        head_spoon_vec = vec_two_points(this.Head, Point.AtParameter(head_spoon_seg, spooniness));
        head_vec = Vector.op_Addition(head_knife_vec, Vector.op_Addition(head_fork_vec, head_spoon_vec));
        
        // move the cheek and head Points
        Cheek = Cheek.Translate(cheek_vec.X, cheek_vec.Y, cheek_vec.Z);
        Head = Head.Translate(head_vec.X, head_vec.Y, head_vec.Z);*/
    }
    /*
    @property
    # returns a curve from the chin, cheek and head points
    def to_curve(self):
        # create a curve from the existing points
        crvL = Curve.bezier([self.chin,self.cheek,self.head])
        # create a curve from from offset points
        crvR = Curve.bezier([self.chin + Vec.ux(),self.cheek + Vec.ux(),self.head])
        # if the prong is on the left flatware side:
        if self.is_left:
            # draw the left curve first, then the right
            return crvL.surrogate,crvR.surrogate
        #else if the prong is on the right side
        else:
            # draw the right curve first, then the left
            return crvR.surrogate, crvL.surrogate */
    
}

test = Prong.ByChin(Point.ByCoordinates(-4, 0, 0), true);
Print(test.Head);

test.set_knife(Point.ByCoordinates(-5, 29, 0), Point.ByCoordinates(-4, 62, 0));
test.set_fork(Point.ByCoordinates(-5, 5, 0), Point.ByCoordinates(-4, 30, 0));
test.set_spoon(Point.ByCoordinates(-12, 10, 0), Point.ByCoordinates(-4, 20, 0));

test.make_cutlery(1, 1, 1);