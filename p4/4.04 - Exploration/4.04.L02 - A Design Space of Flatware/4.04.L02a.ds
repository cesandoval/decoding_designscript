/*
4.04.L02a
Creates a Prong class with methods for the creation of a Prong object for the flatware design space.

members:
chin (Point) A Point that represents the Prong's origin
cheek (Point) A Point that represents the Prong's midpoint
head (Point) A point that represents the Prong's tip
is_left (bool) A boolean value that indicates the location of this Prong on the flatware

methods:
set_knife(Point, Point) Sets the final chin and tip Points for the knife location of this Prong
set_fork(Point, Point) Sets the final chin and tip Points for the fork location of this Prong
set_spoon(Point, Point) Sets the final chin and tip Points for the spoon location of this Prong
make_cutlery(float, float, float) Modifies the chin, cheek and head Point locations based on knifiness, forkiness, spooniness
to_curve() Returns the modified Plines representation of this Prong
*/
/*
A class that creates a Prong object
*/

import("ProtoGeometry.dll");
import("Math.dll");
import("../../../library/decodes_functions.ds");

class Prong
{
    Chin : Point;
    Cheek : Point;
    Head : Point;
    Is_left : bool;
    Cheek_Knife : Point;
    Head_Knife : Point;
    Cheek_Fork : Point;
    Head_Fork : Point;
    Cheek_Spoon : Point;
    Head_Spoon : Point;

    constructor ByChin(chin, is_left)
    {
        // store variables for initial Point locations
        Chin = chin;
        Cheek = chin.Translate(0, 3, 0);
        Head = chin.Translate(0.5, 6, 0);
        // store the prong's side
        Is_left = is_left;
    }
     
    // store the variables for final knife Point locations
    def set_knife(cheek,head)
    {
        Cheek_Knife = cheek;
        Head_Knife = head;
    }
      
    // store the variables for final fork Point locations   
    def set_fork(cheek, head)
    {
        Cheek_Fork = cheek;
        Head_Fork = head;
    }
        
    // store the variables for final spoon Point locations
    def set_spoon(cheek, head)
    {
        Cheek_Spoon = cheek;
        Head_Spoon = head;
    }
      
    /*
    Given forkiness, spooniness and knifiness values, this function creates a hybridized Prong.
    */
    def make_cutlery(knifiness, forkiness, spooniness)
    {
        // create a cheek movement vector from all given values
        cheek_knife_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Knife);
        cheek_knife_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_knife_seg, knifiness));
        cheek_fork_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Fork);
        cheek_fork_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_fork_seg, forkiness));
        cheek_spoon_seg = Line.ByStartPointEndPoint(this.Cheek, this.Cheek_Spoon);
        cheek_spoon_vec = vec_two_points(this.Cheek, Point.AtParameter(cheek_spoon_seg, spooniness));
        cheek_vec = Vector.op_Addition(cheek_knife_vec, Vector.op_Addition(cheek_fork_vec, cheek_spoon_vec));
            
        // create a head movement vector from all given values
        head_knife_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Knife);
        head_knife_vec = vec_two_points(this.Head, Point.AtParameter(head_knife_seg, knifiness));
        head_fork_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Fork);
        head_fork_vec = vec_two_points(this.Head, Point.AtParameter(head_fork_seg, forkiness));
        head_spoon_seg = Line.ByStartPointEndPoint(this.Head, this.Head_Spoon);
        head_spoon_vec = vec_two_points(this.Head, Point.AtParameter(head_spoon_seg, spooniness));
        head_vec = Vector.op_Addition(head_knife_vec, Vector.op_Addition(head_fork_vec, head_spoon_vec));
        
        // move the cheek and head Points
        Cheek = Cheek.Translate(cheek_vec.X, cheek_vec.Y, cheek_vec.Z);
        Head = Head.Translate(head_vec.X, head_vec.Y, head_vec.Z);
    }
    
    // returns a curve from the chin, cheek and head points
    def to_curve()
    {
        // create a curve from the existing points
        crvL = BSplineCurve.ByPoints({ this.Chin, this.Cheek, this.Head });
        // create a curve from from offset points
        crvR = BSplineCurve.ByPoints({ this.Chin.Translate(1, 0, 0), this.Cheek.Translate(1, 0, 0), this.Head });
        // if the prong is on the left flatware side:
        return = this.Is_left == true ? { crvL, crvR } : { crvR, crvL };
    }
}