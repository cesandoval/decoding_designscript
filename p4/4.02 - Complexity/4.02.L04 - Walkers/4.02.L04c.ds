/*
4.02.L04c
Create a new Guy class that can be steered

members:
pos (Point) The location of the Guy object
vel (Vec) The velocity vector of the Guy object

methods:
step (None) Update Guys position and choose a new direction velocity vector
steer (Vec) Modify Guy's velocity by a given vector
*/
/*
A guy class is defined with a position, direction and a method for updating.
*/

import("ProtoGeometry.dll");
import("Math.dll");
import("../../../library/decodes_functions.ds");

class Guy
{
    Pos : Point;
    Vel : Vector;
    
    constructor FromPosVel(pos_start, vel_start)
    {
        // sets the initial position of the Guy
        Pos = pos_start;
        // sets the initial velocity vector for the Guy
        Vel = vel_start;
    }
    
    /*
    Cause the Guy object to move, using its current velocity, then randomly pick a new velocity
    */
    def Step : Guy()
    {
        // update the position of the Guy
        Pos = Point.ByCoordinates(Pos.X + Vel.X, Pos.Y + Vel.Y, Pos.Z + Vel.Z);
        // pick a new 2d velocity vector
        Vel = Vector.ByCoordinates(Math.Rand(-1, 1), Math.Rand(-1, 1), 0).Normalize();
    }
    
    /*
    Steer the Guy by adding a given vector to its current velocity
    */           
    def Steer : Guy(vec:Vector)
    {
        // limit to the force of the vector
        vec = limited(vec, 0.5);
        // update the velocity of the Guy
        this.Vel = Vector.ByCoordinates(this.Vel.X + vec.X, this.Vel.Y + vec.Y, this.Vel.Z + vec.Z);
    }
}

/*
Steps a number of times with a collection in an Associative code
*/
def stepper(x, guy)
{
    guy.Step();
    return = guy.Pos;
}

/*
Create a random walker, and steer it.
*/

start_pt = Point.ByCoordinates(-1.19, -0.89, 0);
start_vel = Vector.ByCoordinates(0.59, 1.0, 0);

// initialize an instance of the Guy class
debord = Guy.FromPosVel(start_pt, start_vel);
steps = 30;
// steps multiple times
pts = stepper(0..steps, debord);
// make a path from the points
lines = pts_to_lines(pts);