import("ProtoGeometry.dll");
import("Math.dll");


// Returns a new vector limited to a given length.
def limited(vector, n)
{
    new_vec = vector.Length < n ? vector : vector.Scale(n);
    return = new_vec;
}

/*
A guy class is defined with a position, direction and a method for updating.
*/
class Guy
{
    Pos : Point;
    Vel : Vector;
    
    constructor FromPosVel(pos_start, vel_start)
    {
        // sets the initial position of the Guy
        Pos = pos_start;
        // sets the initial velocity vector for the Guy
        Vel = vel_start;
    }
    
    /*
    Cause the Guy object to move, using its current velocity, then randomly pick a new velocity
    */
    def Step : Guy()
    {
        // update the position of the Guy
        Pos = Point.ByCoordinates(Pos.X + Vel.X, Pos.Y + Vel.Y, Pos.Z + Vel.Z);
        // pick a new 2d velocity vector
        Vel = Vector.ByCoordinates(Math.Rand(-1, 1), Math.Rand(-1, 1), 0).Normalize();
    }
    
    /*
    Steer the Guy by adding a given vector to its current velocity
    */           
    def Steer : Guy(vec:Vector)
    {
        // limit to the force of the vector
        vec = limited(vec, 0.5);
        // update the velocity of the Guy
        this.Vel = Vector.ByCoordinates(this.Vel.X + vec.X, this.Vel.Y + vec.Y, this.Vel.Z + vec.Z);
    }
}



start_pt = Point.ByCoordinates(-1.19, -0.89, 0);
start_vel = Vector.ByCoordinates(0.59, 1.0, 0);

// initialize an instance of the Guy class
debord = Guy.FromPosVel(start_pt, start_vel);
steps = 30;
range = 0..steps;

def stepper(x, guy)
{
    guy.Step();
    return = guy.Pos;
}

path = BSplineCurve.ByPoints(stepper(range, debord), false);

