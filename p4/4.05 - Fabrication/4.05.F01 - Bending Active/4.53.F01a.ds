import("ProtoGeometry.dll");
import("Math.dll");

rad_small = 5.06;
rad_large = 26.14;
divs = 50;
mid_pt = 0.35;
height = 8.00;
strength = 2.80;

// Create the interior and exterior circles 
cir1 = Point.AtParameter(Circle.ByCenterPointRadius(Point.ByCoordinates(0, 0, 0), rad_small),0..1..#divs); 
cir2 = Point.AtParameter(Circle.ByCenterPointRadius(Point.ByCoordinates(0, 0, 0), rad_large),0..1..#divs);

// Move the points of the larger circle up with sine values.
humps = 3;
sine = (Math.Sin(Math.RadiansToDegrees(0..Math.PI * 2 * humps..#divs)) + 1) * strength; //[(math.sin(i) + 1) * strength for i in Interval(0, math.pi * 2 * humps).divide(divs)];

cir2 = cir2.Translate(0, 0, sine);
mid = Point.AtParameter(Line.ByStartPointEndPoint(cir1, cir2),mid_pt).Translate(0,0,height); //{  cir1 , cir2};
pl = { };
[Imperative]
{
    for(i in 0..divs - 1)
    {
        if (i%2 == 0)
            {pl[Count(pl)] = BSplineCurve.ByPoints({ cir1[i], mid[i], cir2[i] });}
        else
            {pl[Count(pl)] = BSplineCurve.ByPoints({ cir2[i], mid[i], cir1[i] });}
    }
}