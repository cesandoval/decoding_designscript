import("ProtoGeometry.dll");
import("Math.dll");

def fitness(sample)
{
    dhue = 255 - Math.Abs(sample.RedValue - goal.RedValue);
    dsat = 255 - Math.Abs(sample.GreenValue - goal.GreenValue);
    dval = 255 - Math.Abs(sample.BlueValue - goal.BlueValue);
    sum = (dhue * red_weight) + (dsat * green_weight) + (dval * blue_weight);
    return = sum / (red_weight + green_weight + blue_weight);
}

def color_point(r_val, g_val, b_val)
{
    return = Point.ByCoordinates(r_val, g_val, b_val).SetColor(Color.ByARGB(255, r_val, g_val, b_val));
}

def get_fitness(r, g, b)
{
    return = [Imperative]
    {
        pt = color_point(r, g, b);
        fit = fitness(pt.Color);
        if (fit > best_fit)
        {
            best_fit = fit;
            best_clr = pt.Color;
        }
        if (fit > thresh)
        {
            return = pt;
        }
    }
}

// define goal values
red_weight = 255;
green_weight = 255;
blue_weight = 255;
goal = Color.ByARGB(255, 180, 60, 90);

// initialize best results
best_clr = Color.ByARGB(255,0, 0, 0);
best_fit = 0.0;
pts = { };
thresh = 180;
n = 8;

// create an interval with n steps
color_int = 0..255..#n;
pts = get_fitness(color_int<1>, color_int<2>, color_int<3>);