/*
4.07.L06c
Method that returns a best fit Arc using the modified least squares method.

required: 
pts_in ([Point]) A list of Points.

result: 
(Arc) An arc 
*/
/*
Returns a best fit arc using the modified least squares method.
*/

import("ProtoGeometry.dll");
import("Math.dll");
import("../../../library/decodes_functions.ds");

def lstSquaresArc(pts_in : Point[])
{
    cnt = Count(pts_in);
    // if there is less than two points given
    message = cnt < 2 ? "Please provide more points" : null;

    x = Sum(pts_in.X);
    y = Sum(pts_in.Y);
    xsq = Sum(Math.Pow(pts_in.X, 2));
    ysq = Sum(Math.Pow(pts_in.Y, 2));
    xy = Sum(pts_in.X * pts_in.Y);
    xysq = Sum(pts_in.X * Math.Pow(pts_in.Y, 2));
    xsqy = Sum(Math.Pow(pts_in.X, 2) * pts_in.Y);
    xcube = Sum(Math.Pow(pts_in.X, 3));
    ycube = Sum(Math.Pow(pts_in.Y, 3));

    A = cnt * xsq - Math.Pow(x, 2);
    B = cnt * xy - x * y;
    C = cnt * ysq - Math.Pow(y, 2);
    D = 0.5 * (cnt * xysq - x * ysq + cnt * xcube - x * xsq);
    E = 0.5 * (cnt * xsqy - y * xsq + cnt * ycube - y * ysq);
    
    // set the denominator
    denom = A * C - B * B;
    // if the denominator is not 0:
    center = denom!= 0 ? Point.ByCoordinates((D * C - B * E) / denom, (A * E - B * D) / denom, 0) : null;
    // set the radius of the arc as the average dist between the center and the pts.
    rad = Sum(pts_in.DistanceTo(center)) / cnt;
    //create a segment from the center to that point
    segs = Line.ByStartPointEndPoint(center, pts_in); 
    
    // make the first Vec a reference for the rest
    ref_vec = vec_from_line(segs[0]);
    // for each segment in the list of segments:
    ang = { };
    [Imperative]
    {
        for(seg in segs)
        {
            if (ref_vec.Cross(vec_from_line(seg)).Z < 0)
            {
                ang[Count(ang)] = angle(ref_vec, vec_from_line(seg)) * - 1;
            }
            else
            {
                ang[Count(ang)] = angle(ref_vec, vec_from_line(seg));
            }
        }
    }
    // sort all segments by the calculated angles
    new_segs = segs[SortIndexByValue(ang)];
    new_ang = ang[SortIndexByValue(ang)];
    // set the sweep angle 
    sweep = new_ang[-1] - new_ang[0];
    // set the CS of the Arc
    cs = CoordinateSystem.ByOriginVectors(center, vec_from_line(segs[0]), vec_from_line(segs[1]));
    return = Arc.ByCenterPointRadiusAngle(cs.Origin, rad, angle( CoordinateSystem.Identity().XAxis, cs.XAxis), sweep, cs.ZAxis);
}

/*
Create an Arc between a number of Points
*/
pts = { Point.ByCoordinates(191.708327, 59.109746, 0.0), Point.ByCoordinates(165.687163, 103.713103, 0.0), Point.ByCoordinates(144.614144, 64.185974, 0.0), Point.ByCoordinates(136.081219, 98.428218, 0.0) };
arc = lstSquaresArc(pts);