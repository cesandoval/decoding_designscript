import("ProtoGeometry.dll");
import("Math.dll");

def angle(vec1, vec2)
{
    vdot = vec1.Dot(vec2) / (vec1.Length * vec2.Length);
    [Imperative]
    {
        if (vdot > 1.0)
            vdot = 1.0;
        if (vdot < -1.0)
            vdot = -1.0;
    }
    return = Math.Acos(vdot);
}

def from_tan(spt, ept, tan)
{
    vec_ab = Vector.ByCoordinates(ept.X - spt.X, ept.Y - spt.Y, ept.Z - spt.Z);
    vec_rad = tan.Cross(tan.Cross(vec_ab));
    ang = angle(vec_ab, vec_rad);
    rad = vec_ab.Length / Math.Cos(ang) / 2.0;
    center = spt.Translate(vec_rad, -rad);// this should be positive
    return = Arc.ByCenterPointStartPointSweepPoint(center, spt, ept);
}
    
range = 0..Math.PI * 2..#4;
crv = BSplineCurve.ByPoints(Point.ByCoordinates(range, Math.Sin(Math.RadiansToDegrees(range)), 0));
res = 50;

start_range = 0..1 - 1 / res..1 / res;
end_range = 0 + 1 / res..1..1 / res;

plns = crv.CoordinateSystemAtParameter(start_range);
spts = plns.Origin;
tans = plns.XAxis;
epts = crv.CoordinateSystemAtParameter(end_range).Origin;
arcs = from_tan(spts, epts, tans);