/*
4.03.F01c
Given three Circles and a tangent Vec, create three Circles and create a Circle that is tangent to every pair of Circles. Create Arcs with the intersection Points and the centroids of the Circles. 

required: 
cir_a (Circle) First circle. 
cir_b (Circle) Second circle. 
cir_c (Circle) Third Circle.
tan_off (float) Tangent offset value for the circles.

out: 
ret ([Arc]) List of Arcs. 
*/
/*
Given 3 Circles, create 2 mutually tangent Circles, and Arcs based on their tangent Points. Create a RotationalSurface with the Arcs.
*/

import("ProtoGeometry.dll");
import("Math.dll");
import("../../../library/decodes_functions.ds");

cir_a = Circle.ByCenterPointRadius(Point.ByCoordinates(0, 5.1, 0), 1.50);
cir_b = Circle.ByCenterPointRadius(Point.ByCoordinates(4.95, 4.70, 0), 2.88);
cir_c = Circle.ByCenterPointRadius(Point.ByCoordinates(10, 4.88, 0), 1.86);
tan_off = -0.40 * Math.PI;

// given two Circles, get a mutually tangent Circle 
circ1_extras = circle_mutually_tangent(cir_a, cir_b, tan_off, true).SetVisibility(false);
cir_ab = circ1_extras[0].SetVisibility(false);
// get a point on the perimeter of the Circle
pt_ab = circ1_extras[1];
pt_ba = circ1_extras[2];

// given two Circles, get a mutually tangent Circle 
circ2_extras = circle_mutually_tangent(cir_b, cir_c, tan_off, true).SetVisibility(false);
cir_bc = circ2_extras[0].SetVisibility(false);
// get a point on the perimeter of the Circle
pt_bc = circ2_extras[1];
pt_cb = circ2_extras[2];


// Get the starting point of the first arc by getting a point diagonal to the circle origin
vec_a = Vector.ByCoordinates(-1, 1, 0).Normalize().Scale(cir_a.Radius);
pt_a = Point.ByCoordinates(cir_a.CenterPoint.X + vec_a.X, cir_a.CenterPoint.Y + vec_a.Y, cir_a.CenterPoint.Z + vec_a.Z);


// Get the starting point of the second arc by getting a point diagonal to the circle origin
vec_c = Vector.ByCoordinates(1, 1, 0).Normalize().Scale(cir_c.Radius);
pt_c = Point.ByCoordinates(cir_c.CenterPoint.X + vec_c.X, cir_c.CenterPoint.Y + vec_c.Y, cir_c.CenterPoint.Z + vec_c.Z);


// Make an arc with the centroid of circle A, the given point in the circle and the tangent point on the circle
arc_a = Arc.ByCenterPointStartPointSweepPoint(cir_a.CenterPoint, pt_ab, pt_a);
// Make an arc from the centroid of the circle tangent to circles and the tangen points in circles a and b.
arc_ab = Arc.ByCenterPointStartPointSweepPoint(cir_ab.CenterPoint, pt_ab, pt_ba);
// Make an arc with the centroid of circle B, and the tangent points in circles b and c
arc_b = Arc.ByCenterPointStartPointSweepPoint(cir_b.CenterPoint, pt_bc, pt_ba);
// Make an arc from the centroid of the circle tangent to circles B and C and the tangen points in circles b and c.
arc_bc = Arc.ByCenterPointStartPointSweepPoint(cir_bc.CenterPoint, pt_bc, pt_cb);
// Make an arc with the centroid of circle B, the given point in the circle and the tangent point on the circle
arc_c = Arc.ByCenterPointStartPointSweepPoint(cir_c.CenterPoint, pt_c, pt_cb);

rot_w = 0.30 * Math.PI;
arcs = { arc_a, arc_ab, arc_b, arc_bc, arc_c };

cir_1 = Circle.ByCenterPointRadius(Point.ByCoordinates(0, -15, -7.76), 2.00);// , Vector.ByCoordinates(1, 0, 0));
cir_2 = Circle.ByCenterPointRadius(Point.ByCoordinates(0, -7.93, -7.72), 5.00);// , Vector.ByCoordinates(1, 0, 0));
tan_off_rail = Math.PI * - 1;// 0.70;
    

// Get the mutually tangent circle to two given circles, and the tangent points on the circles
circ12_extras = circle_mutually_tangent(cir_1, cir_2, tan_off_rail, true).SetVisibility(false);
cir_12 = circ12_extras[0].SetVisibility(false);
// get a point on the perimeter of the Circle
pt_12 = circ12_extras[1];
pt_21 = circ12_extras[2];

// Get the starting point of the first arc by getting a point diagonal to the circle origin
vec_1 = Vector.ByCoordinates(0, -1, 0).Normalize().Scale(cir_1.Radius);
pt_1 = Point.ByCoordinates(cir_1.CenterPoint.X + vec_1.X, cir_1.CenterPoint.Y + vec_1.Y, cir_1.CenterPoint.Z + vec_1.Z);

// Get the starting point of the first arc by getting a point diagonal to the circle origin
vec_2 = Vector.ByCoordinates(0, 1, 0).Normalize().Scale(cir_2.Radius);
pt_2 = Point.ByCoordinates(cir_2.CenterPoint.X + vec_2.X, cir_2.CenterPoint.Y + vec_2.Y, cir_2.CenterPoint.Z + vec_2.Z);


// Make an arc with the centroid of circle A, the given point in the circle and the tangent point on the circle
//arc_1 = Arc.ByCenterPointStartPointSweepPoint(cir_1.CenterPoint, pt_12, pt_1);
/*
# Make an arc with the centroid of circle A, the given point in the circle and the tangent point on the circle
arc_a = Arc.from_pts(cir_a.plane.origin,pt_a,pt_ab)
# Make an arc from the centroid of the circle tangent to circles and the tangen points in circles a and b.
arc_ab = Arc.from_pts(cir_ab.plane.origin,pt_ab,pt_ba)
# Make an arc with the centroid of circle B, the given point in the circle and the tangent point on the circle
arc_b = Arc.from_pts(cir_b.plane.origin,pt_ba,pt_b)*/