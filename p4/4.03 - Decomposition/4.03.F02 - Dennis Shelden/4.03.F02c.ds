import("ProtoGeometry.dll");
import("Math.dll");

/*
Creates a Vector between two points.
*/
def vec_two_points(spt, ept)
{
    return =  Vector.ByCoordinates(ept.X - spt.X, ept.Y - spt.Y, ept.Z - spt.Z);
}

/* 
Rotates the vertices in this object.
*/
def rotate(pgon,n)
{
    n = n > Count(pgon.Vertices)-1 ? n%Count(pgon.Vertices) : n;
    n = n < -Count(pgon.Vertices) - 1 ? -Math.Abs(n)%Count(pgon.Vertices) : n;
    verts = SetUnion(pgon.Vertices[n..Count(pgon.Vertices) - 1], pgon.Vertices[0..n]);
    return = Polygon.ByVertices(verts);
}

def sort_edges(pgon, reverse)
{
    edges = pgon.Edges;
    result = 0..Count(edges) - 1;
    result = SortIndexByValue(edges.Length, reverse);
    return = result[0];
}
    
def panel_cut(pgon, panel_width, ei)
{
    return = [Imperative]
    {
        // orient the pgon to the chosen edge 
        pgon = rotate(pgon, ei);
        // choose the initial edge and adjacent edges
        edge = pgon.Edges[0];
        lhedge = pgon.Edges[1];
        rhedge = pgon.Edges[-1];
        // set a counter for how many edges are not being used
        rem_edge = Count(pgon.Edges) - 2;
        
        // Set up the offset line and intialize intersection pts and rotational markers
        off_vec = vec_two_points(edge.StartPoint, edge.EndPoint).Cross(vec_two_points(edge.StartPoint, pgon.Plane.Origin)).Cross(vec_two_points(edge.StartPoint, edge.EndPoint)).Normalize().Scale(panel_width);
        line = Plane.ByOriginNormal(edge.StartPoint.Translate(off_vec.X, off_vec.Y, off_vec.Z), vec_two_points(edge.StartPoint, edge.EndPoint).Cross(Vector.ByCoordinates(0, 0, 1)));
        
        lh_step = false;
        rh_step = false;
        p0 = null;
        p1 = null;
        // check for intersections with the left-hand adjacent line, set and record a new left-hand adjacent line if necessary, if there are no remaining panels to be cut, return
        if (Count(line.Intersect(lhedge)) > 0)
        {
            p0 = line.Intersect(lhedge);
        }
        else
        {
            rem_edge = rem_edge - 1;
            if (rem_edge == 0)
            {
                return = { false, false, false };
            }
            lhedge = pgon.Edges[2];
            lh_step = true;
            if (Count(line.Intersect(lhedge)) > 0)
            {
                p0 = line.Intersect(lhedge);
            }
        }
        // check for intersections with the right-hand adjacent line, set and record a new right-hand adjacent line if necessary, if there are no remaining panels to be cut, return
        if (Count(line.Intersect(rhedge)) > 0)
        {
            p1 = line.Intersect(rhedge);
        }
        else
        {
            rem_edge = rem_edge - 1;
            if (rem_edge == 0)
            {
                return = { false, false, false };
            }
            rhedge = pgon.Edges[-2];
            rh_step = true;
            if (Count(line.Intersect(rhedge)) > 0)
            {
                p1 = line.Intersect(rhedge);
            }
        }
        // if there are no remaining panels to be cut, return
        if (p0 == null || p1 == null)
        {
            return = { false, false, false };
        }
        // find the pts for the panel which has been cut
        panelpts = { p0, p1, pgon.Vertices[0], pgon.Vertices[1] };

        if (lh_step == true && rh_step == false)
        {
            panelpts = { pgon.Vertices[0], pgon.Vertices[1], pgon.Vertices[2], p0, p1 };
        }
        if (rh_step == true && lh_step == false)
        {
            panelpts = { pgon.Vertices[-1], pgon.Vertices[0], pgon.Vertices[1], p0, p1 };
        }
        if (rh_step == true && lh_step == true)
        {
            panelpts = { pgon.Vertices[-1], pgon.Vertices[0], pgon.Vertices[1], pgon.Vertices[2], p0, p1 };
        }
        panel = Polygon.ByVertices(panelpts);
        
        // Set up the next polygon and return to global orientation
        npgonpts = { p0, p1 };
        
        for(r in 0..rem_edge-1)
        {
            r = r + 1;
            if (rh_step == true)
            {
                r = r + 1;
            }
            npgonpts[Count(npgonpts)] = pgon.Vertices[-r];
        }
        npgon = Polygon.ByVertices(npgonpts);
        //npgon.rotate(-ei);
        return = { panel, npgon, true };
    } 
}


pa = Point.ByCoordinates(24.4, 4.2, 0.0);
pb = Point.ByCoordinates(19.0, 12.6, 0.0);
pc = Point.ByCoordinates(27.2, 22.1, 0.0);
pd = Point.ByCoordinates(43.5, 11.8, 0.0);
my_pgon = Polygon.ByVertices({ pa, pb, pc, pd });
p_width = 2.41;
edge_num = 2;
reverse = true;


/*
// create a Herringbone pattern
// initialize resulting panel list
panels = { };

[Imperative]
{
    // set starting value
    group = { true, true, true };
    
    // start with side that is input
    side_num = edge_num;
    
    // generate panels
    while (group[2] == true)
    {
        // do a panel cut
        group = panel_cut(my_pgon, p_width, side_num);
        // panel cut returns:
        //   [0] : polygon with width mat_width
        //   [1] : polygon representing remaining material
        //   [2] : edge to use for cut
        
        // if panel cut does not work, values with be False
        if (group[0] != false)
        {
            // add new panel to list of results
            panels[Count(panels)] = group[0];
            
            // set the panel to the remainder
            my_pgon = group[1];
            
            // choose the next edge
            side_num = side_num = 1;
        }
    }
}*/




// create a pattern based on edge length
panels = { };
[Imperative]
{
    group = { true, my_pgon, true };
    
    while(group[2] == true)
    {
        edge_num = sort_edges(my_pgon, reverse);
        group = panel_cut(my_pgon, p_width, edge_num);
        my_pgon = group[1];
        //if not p_gon : break
        panels[Count(panels)] = group[0];
    }
}




/*
// Single Spiral 
panels = { };
[Imperative]
{
    group = { true, my_pgon, true };
    cnt = edge_num;
    cnti = 0;
    
    while (group[2] == true)
    {
        group = panel_cut(my_pgon, p_width, cnt);
        if (group[0]!= false)
        {
            panels[Count(panels)] = group[0];
            my_pgon = group[1];
            //if not p_gon : break
            if (cnti % 2 == 0)
            {
                my_pgon.rotate(-1);
            }
            if (cnti % 2 == 1)
            {
                my_pgon.rotate(1);
            }
            cnti = cnti + 1; 
        }
    }           
}*/



/*
// Double Spiral 
panels = { };
[Imperative]
{
    group = { true, my_pgon, true };
    cnt = edge_num;
    cnti = 1;

    while (group[2] == true)
    {
        group = panel_cut(my_pgon, p_width, cnt);
        if (group[0]!= false)
        {
            panels[Count(panels)] = group[0];
            my_pgon = group[1];
            //if not p_gon : break
            cnt = cnt - 1;
            cnti = cnt + 1;
            if (cnti % 2 == 0)
            {
                cnt = cnt + 1;
            }
        }
    }
}*/


/*
// Weave 
panels = { };
[Imperative]
{
    group = { true, my_pgon, true };
    cnt = edge_num;

    while(group[2] == true)
    {
        group = panel_cut(my_pgon, p_width, cnt);
        if (group[0]!= false)
        {
            panels[Count(panels)] = group[0];
            my_pgon = group[1];
            //if not p_gon : break
            if (cnt %2 == 0)
            {
                my_pgon.rotate(1);
            }
            cnt = cnt + 1;
        }
    }
}*/
