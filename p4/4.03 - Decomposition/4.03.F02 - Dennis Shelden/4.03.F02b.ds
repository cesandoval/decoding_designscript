/*
4.03.F02b
Methods to recursively subdivide a panel based on material width.

required:
p_gon (PGon) Panel to subdivide.
mat_width (float) Material width.
edg_num (int) Initial edge of the PGon.

result:
ret [PGons] Sub panels.
*/
/*
Method to sort edged based on length.
*/

import("ProtoGeometry.dll");
import("Math.dll");
import("../../../library/decodes_functions.ds");

def sort_edges(pgon, reverse)
{
    // get the edges of a Polygon
    edges = pgon.Edges;
    result = 0..Count(edges) - 1;
    // sort the edges by length
    result = SortIndexByValue(edges.Length, reverse);
    return = result[0];
}
    
/*
Subdivide a panel with a Herringbone pattern.
*/
def panel_cut(pgon, panel_width, ei)
{
    return = [Imperative]
    {
        // orient the pgon to the chosen edge 
        pgon = rotate(pgon, ei);
        // choose the initial edge and adjacent edges
        edge = pgon.Edges[0];
        lhedge = pgon.Edges[1];
        rhedge = pgon.Edges[-1];
        // set a counter for how many edges are not being used
        rem_edge = Count(pgon.Edges) - 2;
        
        // set up the offset line and initialize intersection pts and rotational markers
        off_vec = vec_two_points(edge.StartPoint, edge.EndPoint).Cross(vec_two_points(edge.StartPoint, pgon.Plane.Origin)).Cross(vec_two_points(edge.StartPoint, edge.EndPoint)).Normalize().Scale(panel_width);
        line = Plane.ByOriginNormal(edge.StartPoint.Translate(off_vec.X, off_vec.Y, off_vec.Z), vec_two_points(edge.StartPoint, edge.EndPoint).Cross(Vector.ByCoordinates(0, 0, 1)));
        
        lh_step = false;
        rh_step = false;
        p0 = null;
        p1 = null;
        // check for intersections with the left-hand adjacent line, set and record a new left-hand adjacent line if necessary, if there are no remaining panels to be cut, return
        if (Count(line.Intersect(lhedge)) > 0)
        {
            // define an intersection Point
            p0 = line.Intersect(lhedge);
        }
        else
        {
            // subtract one number to the remaining edges counter
            rem_edge = rem_edge - 1;
            // if there are no remaining edges: return False
            if (rem_edge == 0)
            {
                return = { false, false, false };
            }
            lhedge = pgon.Edges[2];
            lh_step = true;
            // if there is an intersection between edges:
            if (Count(line.Intersect(lhedge)) > 0)
            {
                // define an intersection Point
                p0 = line.Intersect(lhedge);
            }
        }
        // check for intersections with the right-hand adjacent line, set and record a new right-hand adjacent line if necessary, if there are no remaining panels to be cut, return
        if (Count(line.Intersect(rhedge)) > 0)
        {
            p1 = line.Intersect(rhedge);
        }
        else
        {
            rem_edge = rem_edge - 1;
            if (rem_edge == 0)
            {
                return = { false, false, false };
            }
            rhedge = pgon.Edges[-2];
            rh_step = true;
            // if there is an intersection between edges:
            if (Count(line.Intersect(rhedge)) > 0)
            {
                // define an intersection Point
                p1 = line.Intersect(rhedge);
            }
        }
        // if there are no remaining panels to be cut, return
        if (p0 == null || p1 == null)
        {
            return = { false, false, false };
        }
        // create a list with the Points for the panel
        panelpts = { p0, p1, pgon.Vertices[0], pgon.Vertices[1] };

        if (lh_step == true && rh_step == false)
        {
            panelpts = { pgon.Vertices[0], pgon.Vertices[1], pgon.Vertices[2], p0, p1 };
        }
        if (rh_step == true && lh_step == false)
        {
            panelpts = { pgon.Vertices[-1], pgon.Vertices[0], pgon.Vertices[1], p0, p1 };
        }
        if (rh_step == true && lh_step == true)
        {
            panelpts = { pgon.Vertices[-1], pgon.Vertices[0], pgon.Vertices[1], pgon.Vertices[2], p0, p1 };
        }
        // create a Polygon with the list of Points
        panel = Polygon.ByVertices(panelpts);
        
        // Set up the next polygon and return to global orientation
        npgonpts = { p0, p1 };
        
        // for every edge number in the remaining edges:
        for(r in 0..rem_edge-1)
        {
            // add a number to the edge number
            r = r + 1;
            // if there is a rh_step: add a number to the edge number
            if (rh_step == true)
            {
                r = r + 1;
            }
            // add the last vertice to the list of Points
            npgonpts[Count(npgonpts)] = pgon.Vertices[-r];
        }
        // create a PGon with the list of Points
        npgon = Polygon.ByVertices(npgonpts);
        //npgon.rotate(-ei);
        return = { panel, npgon, true };
    } 
}

/*
Subdivide a Panel.
*/

pa = Point.ByCoordinates(24.4, 4.2, 0.0);
pb = Point.ByCoordinates(19.0, 12.6, 0.0);
pc = Point.ByCoordinates(27.2, 22.1, 0.0);
pd = Point.ByCoordinates(43.5, 11.8, 0.0);
my_pgon = Polygon.ByVertices({ pa, pb, pc, pd });
p_width = 2.41;
edge_num = 2;


panels = { };
[Imperative]
{
    group = { true, my_pgon, true };

    while(group[2] == true)//for (z in 0..5)//
    {
        group = panel_cut(my_pgon, p_width, edge_num);
        my_pgon = group[1];
        //if not p_gon : break
        panels[Count(panels)] = group[0];
    }
}